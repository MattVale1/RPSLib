1. Skinned Mesh Batching
You can bake animations into textures like in the gpu gems original article, this is difficult but allows you to batch skinned meshes.

1.b General Batching
You also need to look into static batching, dynamic batching and possibly GPU instancing for everything in the scene, and try and keep batches to a bare minimum.

1.c GPU Skinning
Enable GPU skinning if you have not, and Graphics jobs also. Never turn these off unless you are sure they are unsupported on target platform or are definately not needed. In 90% of cases I come across these will provide a perf gain, and I have yet to see them cause a perf loss in any project I use them in.

2. Imposters
You can use imposters (non animated billboards) for the very very distant units where animation cant be worked out (you could even write a shader for the imposters that moves a few pixels around over time to make it seem like they are slightly moving which should be enough for far far distance units).

3. Occlusion culling
You can use occlusion culling to help with performance. You can bake this in the editor, or write your own custom culling using compute shaders and something like an octree.

You said "I don't have occlusion culling turned on in this case, as it wouldn't do any good considering all 35 enemies are in front of me." Thats not how occlusion culling works, it will still give you a small perf improvement more than likely. Profiler will ofcourse be the true test, but turn it on rather than assuming you dont need it as it will stop anything other than whats in front of you from rendering.

4. Baked Lighting
Bake lighting whereever possible, and try to fake shadows for units. You dont need proper shadows on units except for the ones very very close to the camera, the rest can have blob shadows

5. Optimized geometry and textures
Ensure your geometry is as simplified as possible, same goes for textures. Textures should be set to lowest resolution that you can without sacrificing too much visual quality.

6. Custom Collisions
You will never get collision handling to happen with that many units using rigidbodies and colliders, and thats not really to do with unity but the nature of real time physics. You will need a custom solution using a compute shader and an octree to get high performance physics that also work with a great number of dynamic objects. Unity have already started writing their own which is available as a package. Not sure how thiers works but compute shader + octree would be how I would write one.

7. Data Oriented Design
You could use ECS + Job system to ensure that the code side of the application is as optimised as possible. ECS is built for the types of numbers your talking about, and the mega city demo actually implements a lot of what I have mentioned in this list already.

7.b Job System
If you cant use ECS + Jobs, at the very least jobify all your code that can be (pathfinding, movement, physics checks etc etc)

8. Optimised Shaders
You ideally want to not do full PBR but "approximated PBR" where you edit or write a PBR shader but effectively remove a lot of the heavy calculations and replace them with less accurate but faster calculations. Anything not being used or that doesnt make much visual difference should be stripped from the shader. Definately do not use the built in standard shader, or any standard shaders as it will never live up to the performance of a custom built solution.

9. Clever Instancing / Shader-Fakery
You can write instanced properties for your shader so that as much as possible you can get away with having different visual features on what underneath is actually same mesh same material. You can do all sorts of transformations, color changes, even special normal mapping as instanced things, but there is a limit.

10. Optimized Audio
Everyone always forgets to optimise audio, both in terms of memory + file size but also ensuring that you research how audio affects the scene, ensure you know what processing is being taken up by audio and adjusting accordingly. For instance, if an audio clip can be reused, reuse it. If an audio source can be reused instead of having a ton of them, reuse it.

11. Direct Drawing
Instead of using gameobjects and relying on the engine to determine when and how to draw, use DrawMeshInstancedIndirect to draw them yourself for a big boost to performance. https://docs.unity3d.com/ScriptReference/Graphics.DrawMeshInstancedIndirect.html

12. Pooling
Ensure all objects that are poolable are. This is a basic concept dealt with in a lot of tutorials available here on the unity website.

13. LOD
A lot of people already mentioned this, but you will need some aggresive LOD levels. I would personally have at least 5 LOD levels for what you mention, with furthest LOD being literally a billboard imposter or even a couple of pixels drawn as a post processing effect if it is very very very far away.

14. Quality Settings if all else fails
If all else fails, you will have to decrease your quality settings. I really would always do everything else including a complete redesign before this step if visual quality is important and you have art assets already created. This includes removing the costly post processing effects you seem to be using based on your screenshot.
